name: Changes approved; deploy to prod

on:
  push:
    branches: [ "master" ]

env:
  NPM_REGISTRY_URL: "https://registry.npmjs.com"
  CDN_AWS_PUBLISH_ROLE: TBD
  CDN_BUCKET: cdn.hellosign.com
  CDN_PATH: public/js/embedded
  AWS_REGION: us-east-1
jobs:
  build:
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: write # This is required for publishing releases
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v3

      - name: Extract version from package.json
        uses: sergeysova/jq-action@v2
        id: version
        with:
          cmd: 'jq .version package.json -r'

      - name: Check existing releases
        uses: cardinalby/git-get-release-action@v1
        id: released
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag: "v${{ steps.version.outputs.value }}"

      - name: Block if found
        if: "${{ steps.released.outputs.id }}"
        run: |
          echo "v${{ steps.version.outputs.value }} has already been released, update project version in package.json to produce beta package."
          exit 1

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: ${{ env.NPM_REGISTRY_URL }}

      - name: Build
        run: |
          npm install
          npm run build

      - name: Test
        run: |
          npm test

      - name: Publish Production Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        uses: ncipollo/release-action@v1
        with:
          artifacts: "umd/*.js,umd/*.zip,umd/*.gz"
          tag: "v${{ steps.version.outputs.value }}"
          allowUpdates: false
          draft: false
          generateReleaseNotes: true
          makeLatest: true
          prerelease: false

      - name: Configure AWS credentials for Prod
        id: awskeys
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.CDN_AWS_PUBLISH_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
